package fpinscala.laziness

object StreamTest extends App {
  val s = Stream(1,2,3,4,5,6,7,8)
  println(s)
  println(s.toList)
  println(s.take(3).toList)
  println(s.drop(1).toList)
  println(s.takeWhile(_ < 5).toList)
  println(s.take(2).toList)
  println(s.forAll(_ < 2))
  println(s.takeWhileR(_ < 4).toList)
  println(s.headOption)
  println(Stream.empty.headOption)
  println(s.map((x: Int) => x * 2).toList)
  println(s.filter(_ < 4).toList)
  println(s.append(s).toList)
  println(s.flatMap(x => Stream(x - 1, x, x + 1)).take(7).toList)
  println(s.findF(_ == 4))
  println(Stream.constant(7).take(100).toList)
  println(Stream.from(7).take(100).toList)
  println(Stream.fibs.take(30).toList)
  println(Stream.unfold(0)((x: Int) => if (x < 10) Some((x, x + 1)) else None).toList)
  println(Stream.onesU.take(10).toList)
  println(Stream.constantU(8).take(20).toList)
  println(Stream.fromU(-17).take(10).toList)
  println(Stream.fibsU.take(30).toList)
  println(s.mapU(_ * 2).toList)
  println(s.takeU(3).toList)
  println(s.takeWhileU(_ < 7).toList)
  println(s.zipWith(s.drop(2))(_ + _).toList)
  println(s.zipAll(s.drop(2)).toList)
  println(s.startsWith(s.take(10)))
  println(s.tails.map(_.toList).toList)
  println(s hasSubsequence Stream(7,4,2))
  println(Stream(1,2,3).scanRight(0)(_ + _).toList)
}
